name: Daily Benchmark (PR Version)

on:
  schedule:
    - cron: '0 6 * * *' # Run daily at 6 AM UTC
  workflow_dispatch: # Allow manual triggers

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build TypeScript scripts
        run: pnpm run build:scripts

      - name: Upload built scripts
        uses: actions/upload-artifact@v4
        with:
          name: built-scripts
          path: dist/
          retention-days: 1

  benchmark:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      results-available: ${{ steps.benchmark.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Download built scripts
        uses: actions/download-artifact@v4
        with:
          name: built-scripts
          path: dist/

      - name: Run benchmark with JSON output
        id: benchmark
        run: |
          node dist/benchmark-json.js > benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 1

  analysis:
    runs-on: ubuntu-latest
    needs: benchmark
    if: needs.benchmark.outputs.results-available != 'false'
    outputs:
      readme-updated: ${{ steps.compare.outputs.readme-updated }}
      performance-regression: ${{ steps.compare.outputs.performance-regression }}
      tag-name: ${{ steps.release-info.outputs.tag-name }}
      release-name: ${{ steps.release-info.outputs.release-name }}
      release-exists: ${{ steps.release-info.outputs.release-exists }}
      description-file: ${{ steps.release-info.outputs.description-file }}
      pr-needed: ${{ steps.compare.outputs.readme-updated == 'true' || steps.compare.outputs.performance-regression == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Download built scripts
        uses: actions/download-artifact@v4
        with:
          name: built-scripts
          path: dist/

      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results

      - name: Read current results
        run: |
          echo "RESULTS_JSON<<EOF" >> $GITHUB_ENV
          cat benchmark-results.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Read previous results
        id: previous-results
        run: |
          if [ -f "previous-benchmark-results.json" ]; then
            echo "PREVIOUS_RESULTS_JSON<<EOF" >> $GITHUB_ENV
            cat previous-benchmark-results.json >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "PREVIOUS_RESULTS_JSON={}" >> $GITHUB_ENV
          fi

      - name: Compare results and update README
        id: compare
        run: |
          output=$(node dist/scripts/compare-and-update-readme.js)
          echo "$output"
          if echo "$output" | grep -q "readme-updated=true"; then
            echo "readme-updated=true" >> $GITHUB_OUTPUT
          else
            echo "readme-updated=false" >> $GITHUB_OUTPUT
          fi
          if echo "$output" | grep -q "performance-regression=true"; then
            echo "performance-regression=true" >> $GITHUB_OUTPUT
          else
            echo "performance-regression=false" >> $GITHUB_OUTPUT
          fi
        env:
          CURRENT_RESULTS: ${{ env.RESULTS_JSON }}
          PREVIOUS_RESULTS: ${{ env.PREVIOUS_RESULTS_JSON }}

      - name: Save current results
        run: |
          cp benchmark-results.json previous-benchmark-results.json

      - name: Prepare release information
        id: release-info
        run: |
          output=$(node dist/scripts/create-release.js)
          echo "$output"
          # Parse outputs
          tag_name=$(echo "$output" | grep "tag-name=" | cut -d'=' -f2)
          release_name=$(echo "$output" | grep "release-name=" | cut -d'=' -f2)
          release_exists=$(echo "$output" | grep "release-exists=" | cut -d'=' -f2)
          description_file=$(echo "$output" | grep "release-description-file=" | cut -d'=' -f2)

          echo "tag-name=$tag_name" >> $GITHUB_OUTPUT
          echo "release-name=$release_name" >> $GITHUB_OUTPUT
          echo "release-exists=$release_exists" >> $GITHUB_OUTPUT
          echo "description-file=$description_file" >> $GITHUB_OUTPUT
        env:
          BENCHMARK_RESULTS: ${{ env.RESULTS_JSON }}

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results
          path: |
            previous-benchmark-results.json
            ${{ steps.release-info.outputs.description-file }}
            README.md
          retention-days: 1

  create-pr:
    runs-on: ubuntu-latest
    needs: [benchmark, analysis]
    if: needs.analysis.outputs.pr-needed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download analysis results
        uses: actions/download-artifact@v4
        with:
          name: analysis-results

      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results

      - name: Create branch and commit changes
        run: |
          branch_name="benchmark-results/$(date '+%Y-%m-%d')-${{ needs.analysis.outputs.tag-name }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "$branch_name"
          git add README.md previous-benchmark-results.json
          git commit -m "📊 Update benchmark results - $(date '+%Y-%m-%d') [${{ needs.analysis.outputs.tag-name }}]"
          git push origin "$branch_name"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `benchmark-results/${new Date().toISOString().split('T')[0]}-${{ needs.analysis.outputs.tag-name }}`;
            const tagName = '${{ needs.analysis.outputs.tag-name }}';
            const hasRegression = '${{ needs.analysis.outputs.performance-regression }}' === 'true';

            const title = hasRegression
              ? `⚠️ Benchmark Results with Performance Regression - ${new Date().toISOString().split('T')[0]}`
              : `📊 Daily Benchmark Results - ${new Date().toISOString().split('T')[0]}`;

            let body = `
            ## Automated Benchmark Results

            **Release tag:** [${tagName}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName})
            **Date:** ${new Date().toISOString().split('T')[0]}
            `;

            if (hasRegression) {
              body += `
            ## ⚠️ Performance Regression Detected

            This benchmark run detected a significant performance regression (>10%).
            Please review the results carefully.
            `;
            }

            body += `
            This PR contains:
            - Updated benchmark results in README.md
            - Saved benchmark data in previous-benchmark-results.json

            The benchmark compared performance of nx, turbo, lerna, and lage across the monorepo.
            `;

            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: branchName,
              base: 'main',
              body: body,
              draft: false
            });

      - name: Create or update GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const tagName = '${{ needs.analysis.outputs.tag-name }}';
            const releaseName = '${{ needs.analysis.outputs.release-name }}';
            const releaseExists = '${{ needs.analysis.outputs.release-exists }}' === 'true';
            const descriptionFile = '${{ needs.analysis.outputs.description-file }}';

            let releaseBody = 'No benchmark results available.';
            try {
              releaseBody = fs.readFileSync(descriptionFile, 'utf8');
            } catch (error) {
              console.log('Could not read release description file:', error.message);
            }

            if (releaseExists) {
              console.log(`Updating existing release with tag: ${tagName}`);

              try {
                const { data: release } = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: tagName
                });

                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: releaseName,
                  body: releaseBody,
                  prerelease: false
                });

                console.log('Successfully updated existing release');
              } catch (error) {
                console.log('Release tag exists but could not update release:', error.message);
                console.log('This might be expected if it is a lightweight tag without a release');
              }
            } else {
              console.log(`Creating new release with tag: ${tagName}`);

              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: releaseName,
                body: releaseBody,
                draft: false,
                prerelease: false
              });

              console.log('Successfully created new release');
            }

      - name: Create issue on significant performance regression
        if: needs.analysis.outputs.performance-regression == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const title = '⚠️ Performance Regression Detected';
            const releaseTag = '${{ needs.analysis.outputs.tag-name }}';

            let currentResults = 'Not available';
            let previousResults = 'Not available';

            try {
              currentResults = fs.readFileSync('benchmark-results.json', 'utf8');
            } catch (error) {
              console.log('Could not read current results:', error.message);
            }

            try {
              previousResults = fs.readFileSync('previous-benchmark-results.json', 'utf8');
            } catch (error) {
              console.log('Could not read previous results:', error.message);
            }

            const body = `
            A significant performance regression has been detected in today's benchmark run.

            **Release with results:** [${releaseTag}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${releaseTag})

            **Current Results:**
            \`\`\`json
            ${currentResults}
            \`\`\`

            **Previous Results:**
            \`\`\`json
            ${previousResults}
            \`\`\`

            Please investigate the cause of this performance change.
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['performance', 'regression']
            });
